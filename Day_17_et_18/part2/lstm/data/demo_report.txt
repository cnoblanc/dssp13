The role of hashtags in guiding users to content of interest is of critical importance. However, only a small amount of users include hashtags in their tweets. Some users create their own hashtags, however, these may not be in accordance with the hashtags employed by other users for the same topic. This leads to a very heterogeneous set of hashtags for the same event or topic which in its turn hinders the search process. In this paper, we present Instant#Tag, a system for hashtag recommendation in Twitter. The approach capitalizes on recent advances in word embeddings and employs a metric that measures the distance between two tweets based on the distance between the embeddings of their terms. The system was experimentally proven to be capable of recommending high-quality hashtags during the creation of the tweet.

Social media have gained increased popularity in recent years. Among all microblogging platforms, Twitter has experienced tremendous success since its launch in two thousand six. Twitter allows users to post short messages, the so-called tweets. Since its very beginnings, the service has managed to attract a considerable number of users and has experienced a rapid growth. As of June two thousand sixteen, Twitter has more than three hundred million active users. Users can include into their posts words prepended with the hash '#' symbol. Such a sequence of characters is called a hashtag. The main purpose of hashtags is to allow users to categorize their tweets. Hashtags also allow users to search for tweets related to a specific topic. However, despite the undeniable usefulness of this feature, only eight percent of the tweets contain a hashtag. Since hashtags do not come from a predefined vocabulary, users have to devote some effort in order to find appropriate hashtags for their tweets. Users that are not willing to devote this effort are free to create their own hashtags. However, the use of arbitrary hashtags can lead to confusion and can make subsequent searches for tweets difficult. To help users assign hashtags to their tweets and to encourage the use of hashtags, we propose Instant#Tag, an automatic hashtag recommendation tool that given a tweet, it will return a short list of relevant hashtags as suggestions. The proposed recommendation system consists of several modules. First, a tweet collection module which generates queries and makes use of the Twitter Search API in order to create a collection of tweets that are relevant to the tweet submitted by the user. Furthermore, to measure the similarity between the input tweet and the collected tweets, we represent each tweet as a bag-of-vectors where the vectors correspond to the embeddings of the terms of the tweets, and we employ the Word Mover's Distance, a metric that measures the dissimilarity between such representations. The use of word embeddings allows the system to more accurately measure the similarity between pairs of tweets. An advantage of Instant#Tag compared to existing work is that
it is capable of making recommendations in an online setting.

In our work, we developed Instant#Tag, a system that takes as input a tweet submitted by the user and outputs a set of hashtags that have been employed by several other users and are relevant to the content of the tweet. An overview of the system is illustrated in Figure one. First, it makes use of the Twitter Search API in order to collect a number of recent tweets relevant to the input tweet. To collect the tweets, a series of queries are generated based on the textual content of the input tweet. Each collected tweet is then represented as a bag-of-vectors where each vector corresponds to the embedding of each term contained in the tweet. Subsequently, the system computes the distance between each collected tweet and the input tweet. To compute the distances, we use the recently proposed Word Mover's Distance. Finally, we capitalize on these distances in order to rank the hashtags of the collected tweets and we recommend the most probable ones. Figure two demonstrates the system in use: the user has entered the tweet "I loved Donnie Yen. Iâ€™m one with the Force, the Force is with me!", she has pressed the button for hashtag recommendation, and the system has returned ten hashtags as suggestions. In what follows, we present the different modules of Instant#Tag.

Given a tweet entered by the user, we collect a representative set of data using the Twitter Search API. The Twitter Search API searches against a sampling of recent tweets published in the past seven days. We thus employ the Twitter Search API to collect k tweets related to the tweet entered by the user. This tweet serves as our search query. More specifically, the tweet is first preprocessed and then, we use its terms to construct our queries. We submit successive queries until we collect k tweets. The queries range from very specific to very general ones. The first query asks for recent tweets that contain all the terms extracted from the tweet entered by the user. If the search returns k tweets, we do not submit other queries to the Search API. Otherwise, we use the OR operator to modify the behavior of the search and collect more tweets. More specifically, if the preprocessed tweet entered by the user consists of n terms, we create a query that asks for tweets containing any of all the possible combinations of n minus one terms. The returned tweets are added to the ones obtained from the previous query. If less than k tweets are collected in total, we create a new query asking for tweets containing any of all the possible combinations of n minus two terms. The search is terminated when k tweets are collected in total or after submitting the most general query. To create that query, the single terms of the tweet are combined with an OR operator, that is we search for tweets that share at least one common term with the tweet entered by the user.

Datasets obtained from Twitter are usually very noisy. Therefore, the preprocessing step is a crucial task and should be considered carefully. Our preprocessing pipeline consists of several steps. The first step is to remove all the tweets that do not contain any hashtags. We then remove all the duplicate tweets, that is tweets whose textual content is the same with other tweets. Besides duplicate tweets, we also remove answers to specific users as in most cases they do not seem to provide useful information. We then perform standard text processing tasks to the remaining tweets such as tokenization, stopword, punctuation and special character removal. We also remove URLs, special HTML entities and digits. Note also that we consider only English tweets by restricting the search using the language field provided by Twitter along with the jlang library for language detection since the language information provided by Twitter is not totally reliable. The remaining posts constitute the input set of tweets from which we extract the hashtags to recommend to the user.

To measure the similarity between the tweet inserted by the user and the crawled tweets, we capitalize on the Word Mover's Distance (WMD), a distance metric introduced by Kusner et al. After computing the distance between the tweet entered by the user and each collected tweet, we calculate a score for each hashtag based on the similarities between the tweets containing the hashtag and the input tweet. Specifically, for each hashtag, the score is defined as the sum of the similarities of the tweets containing the hashtag and the tweet entered by the user. We then sort the hashtags in descending order of score and we recommend the top of them to the user.

We evaluated the proposed system by computing precision and recall values on six datasets. Specifically, we collected three hundred tweets for each of the six topics using Twitter's REST API. The topics correspond to events that were popular at the time of writing like the shooting that occurred at a nightclub in Istanbul and the earthquakes that struck Italy. To evaluate our system, we removed the hashtags contained in the tweets, and gave each tweet as input to the hashtag recommendation system. The system then extracted the ten most probable hashtags as suggestions. The quality of the recommendations was evaluated by computing precision and recall values. We compare the proposed approach with a method based on the bag-of-words (BOW) representation. Specifically, tweets are represented as BOW vectors. If a term is present in the tweet, its entry in the vector is one, otherwise zero. The similarity between two tweets is then computed. Table one shows the obtained results on the six datasets. The experiments show that the proposed approach is capable of recommending highquality hashtags. Furthermore, it is clear that the proposed system achieves improved performance compared to the BOW baseline, and the difference in performance is cosiderable. More specifically, it achieves promising recall values on almost all datasets. Furthermore, these values could be higher since there are many cases where the proposed hashtags are not contained in the original tweets, but are relevant to their content. For example, consider the following tweet: "Bernie Sanders arrives at inauguration. I do love Bernie! #feelthebern". Instant#Tag returned several hashtags related to the underlying event. However, it failed to return the one the user created. As regards the achieved precision values, these are very low in general for the computed recommendation sets. This is due to the fact that most tweets contain less than five hashtags. Hence, even if a recommendation set achieves a recall value of one for a tweet containing two hashtags, it only results in a precision of twenty percent as eight of the ten recommended hashtags are not applicable since the tweet contains only two hashtags. In almost all cases, Instant#Tag returns the set of recommended hashtags in less that ten seconds (it depends on the number of submitted queries to the Twitter API). Overall, the experiments show that users can employ Instant#Tag in order to find appropriate hashtags for their tweets.

In this paper, we presented Instant#Tag a system for the recommendation of hashtags in Twitter. The main advantage of Instant#Tag compared to existing work is that it is capable of making recommendations in an online setting.